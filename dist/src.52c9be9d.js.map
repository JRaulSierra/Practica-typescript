{"version":3,"sources":["src/practica_typescript/2.FunctionsBasics.ts","src/index.ts"],"names":[],"mappings":";;;AA0C0D,aAxC1D,SAAS,EAAK,EAAW,GACvB,OAAO,EAAI,EAGb,IAAM,EAAY,SAAC,EAAW,GAC5B,OAAO,EAAI,GAIb,SAAS,EAAa,EAAW,GAC/B,OAAO,EAAI,EAKb,SAAS,EAAS,EAAW,GAC3B,IAAI,EAAS,EAAI,EACjB,QAAQ,IAAI,GAWd,IAAM,EAAqB,CACzB,KAAM,OACN,SAAU,SACV,QAAO,WACL,QAAQ,IAAI,gBAEd,UAAW,WACT,OAAO,IAIX,QAAQ,IAAI,EAAK,aACjB,QAAQ,IAAI,EAAM,EAAW,EAAc,EAAU;;ACzCrD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IADA,QAAA,eACA,QAAA","file":"src.52c9be9d.js","sourceRoot":"..","sourcesContent":["// How to set the type in functions\r\n\r\nfunction suma(a: number, b: number): number {\r\n  return a + b;\r\n}\r\n\r\nconst sumaArrow = (a: number, b: number): number => {\r\n  return a + b;\r\n};\r\n\r\n// con valores opcionales\r\nfunction sumaOptional(a: number, b?: number): number {\r\n  return a + b;\r\n}\r\n\r\n// funcion que no retorna nada\r\n\r\nfunction sumaVoid(a: number, b?: number): void {\r\n  let result = a + b;\r\n  console.log(result);\r\n}\r\n\r\n// Interface con funcion dentro y utilizada en un obj\r\ninterface ObjStructure {\r\n  name: string;\r\n  username: string;\r\n  address: () => void; // function return void\r\n  address_2: () => number; // function return number\r\n}\r\n\r\nconst user: ObjStructure = {\r\n  name: \"HOla\",\r\n  username: \"Hola 2\",\r\n  address() {\r\n    console.log(\"return void\");\r\n  },\r\n  address_2: () => {\r\n    return 1;\r\n  }\r\n};\r\n\r\nconsole.log(user.address_2());\r\nconsole.log(suma, sumaArrow, sumaOptional, sumaVoid, user);\r\n","import \"./style.css\";\nimport \"./practica_typescript/2.FunctionsBasics\";\n"]}